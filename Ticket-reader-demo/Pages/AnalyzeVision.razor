@page "/AnalyzeVision"

@using Microsoft.Azure.CognitiveServices.Vision.ComputerVision;
@using Microsoft.Azure.CognitiveServices.Vision.ComputerVision.Models;

@using BlazorInputFile
@using Ticket_reader_demo.Data
@using Ticket_reader_demo.Services

@using System.Net.Http.Headers
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@inject IFileUpload fileupload
@inject IJSRuntime JSR

<h3>Upload your Image Here:</h3>
<br />
<BlazorInputFile.InputFile OnChange="SelectFile"/>

<div id="MessageBox">

</div>
<hr/>

@if (imagevalue != null)
{
    <p>
        <h5>Result:</h5>
        @imagevalue
    </p>
}



@code {
    String imagevalue;

    static string subscriptionKey = "*****************************"; //Your API key goes here
    static string endpoint = "https://************************.cognitiveservices.azure.com/"; //Your Endpoint goes here
    static string uriBase = endpoint + "vision/v3.2/analyze"; //The service required goes here --See Computer Vision API (v3.2) documentation


    async Task SelectFile(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        if (file!= null)
        {
            await fileupload.UploadFile(file);

            string FilePath = "C:\\ImageDetector\\Ticket-reader-demo\\Ticket-reader-demo\\UploadloadedFiles\\" + file.Name; //Path changes depending of your local route
            imagevalue = FilePath;

            try
            {
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Add("Ocp-Apim-Subscription-Key", subscriptionKey);
                string requestedParameters = "visualFeatures=Categories,Description,Color";
                string uri = uriBase + "?" + requestedParameters;

                HttpResponseMessage response;

                byte[] byteData = GetImageAsByteArray(FilePath);
                using (ByteArrayContent content = new ByteArrayContent(byteData))
                {
                    content.Headers.ContentType = new MediaTypeHeaderValue("application/octet-stream");
                    response = await client.PostAsync(uri, content);

                    
                }
                string contentString = await response.Content.ReadAsStringAsync();

                var result = JsonConvert.DeserializeObject<Root>(contentString);

                imagevalue = JToken.Parse(contentString).ToString();


            }
            catch (Exception ex)
            {

                imagevalue = ex.ToString();
            }


        }

        static byte[] GetImageAsByteArray(string imageFilePath)
        {
            // Open a read-only file stream for the specified file.
            using (FileStream fileStream =
                new FileStream(imageFilePath, FileMode.Open, FileAccess.Read))
            {
                // Read the file's contents into a byte array.
                BinaryReader binaryReader = new BinaryReader(fileStream);
                return binaryReader.ReadBytes((int)fileStream.Length);
            }
        }
    }




}
